// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  accountNo       String           @unique
  name            String
  email           String           @unique
  password        String
  userType        String
  accountVerified Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  userJWT         UserJWT[]
  userAddresses   UserAddress[]
  customerOrders  CustomerOrder[]
  pharmacyRatings PharmacyRating[]
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  label     String
  address   String   @db.Text
  coords    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(references: [id], fields: [userId])
}

model UserJWT {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  isRevoked Boolean  @default(false)
  userId    Int
  user      User     @relation(references: [id], fields: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pharmacy {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  nameSlug          String             @unique
  address           String             @db.Text
  coords            String             @db.Text
  storeHours        String
  contactNumber     String
  reservedMedicines ReservedMedicine[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  pharmacyRatings   PharmacyRating[]
}

model PharmacyRating {
  id         Int      @id @default(autoincrement())
  rating     Int
  feedback   String?
  pharmacyId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pharmacy   Pharmacy @relation(references: [id], fields: [pharmacyId])
  user       User     @relation(references: [id], fields: [userId])
}

model Medicine {
  id              Int              @id @default(autoincrement())
  itemNumber      String           @unique
  name            String           @unique
  nameSlug        String           @unique
  category        String
  price           Float
  quantity        Int
  expirationDate  DateTime
  reservationDate DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  medicineRatings MedicineRating[]
}

model MedicineRating {
  id              Int           @id @default(autoincrement())
  rating          Int
  medicineId      Int
  customerOrderId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  medicine        Medicine      @relation(references: [id], fields: [medicineId])
  customerOrder   CustomerOrder @relation(references: [id], fields: [customerOrderId])
}

model ReservedMedicine {
  id         Int      @id @default(autoincrement())
  pharmacyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pharmacy   Pharmacy @relation(references: [id], fields: [pharmacyId])
}

model CustomerOrder {
  id              Int              @id @default(autoincrement())
  userId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(references: [id], fields: [userId])
  medicineRatings MedicineRating[]
}
